from crewai import Agent, Task, Crew, Process
from crewai.project import agent, task, crew, CrewBase
from crewai_tools import FileReadTool

from crewai import LLM
llm_reasoning = LLM(model='gpt-4o-mini', temperature=0)

@CrewBase
class StaticTester:

    @agent
    def static_logic_tester_agent(self) -> Agent:
        return Agent(
            role="Jest Static Logic Analyzer",
            goal="Analyze a single Jest test file and its source code to identify logical issues without execution.",
            backstory="""I am a deep reasoning expert specialized in static analysis of Jest test suites. With extensive knowledge of JavaScript, Jest's mocking system, and software testing principles, I can identify logical flaws in test cases by carefully analyzing the code flow, mock implementations, and test assertions without needing to run the tests.""",
            llm=llm_reasoning,
            tools=[DirectoryReadTool('/content/rmjt_tests'),FileReadTool()]
        )

    @task
    def static_logic_analysis_task(self) -> Task:
        return Task(
            description="""
            Perform a comprehensive static analysis of the single Jest test file and its relationship to the source code.
            
            The test file and source code have been generated by a previous crew and are available in the working directory.
            
            IMPORTANT: Assume that all mocks in the test are correctly implemented. Focus on analyzing the test logic itself.
            
            Without executing the test, analyze:
            
            1. Each test case's logical flow from setup through execution to assertions
            2. Verify test configurations properly use mocks and assertions match expected outcomes
            3. Identify contradictions or impossible conditions in the test logic
            4. Find potential coverage gaps and untested edge cases
            5. For each issue found:
               - Explain the logical problem step by step
               - Show why it would fail
               - Propose a specific fix
            """,
            expected_output="""
            A comprehensive static analysis report containing:
            
            1. Test Case Logic Analysis with step-by-step traces
            2. Mock Usage Assessment
            3. Coverage Gap Identification
            4. Issue Details with specific fixes
            5. Overall Evaluation with pass/fail predictions
            """,
            agent=self.static_logic_tester_agent(),
            output_file="static_test_analysis.md"
        )

    @crew
    def crew(self) -> Crew:
        return Crew(
            agents=[self.static_logic_tester_agent()],
            tasks=[self.static_logic_analysis_task()],
            process=Process.sequential,
            verbose=True
        )
